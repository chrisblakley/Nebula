// ===========================
// Mixins
// ===========================

//.element {@include prefix((transition: all 0.25s), webkit ms);}
//.element {@include prefix((animation: animation-name 2s infinite linear));}
@mixin prefix($map, $vendors: webkit moz ms o){
	@each $prop, $value in $map {
		@if $vendors {
			@each $vendor in $vendors {
				#{"-" + $vendor + "-" + $prop}: #{$value};
			}
		}
		#{$prop}: #{$value};
	}
}

//.element a {@include link-colors(red, orange, yellow, green, blue);}
@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false){
	color: $normal;
	@if $visited {
		&:visited {color: $visited;}
	}
	@if $focus {
		&:focus {color: $focus;}
	}
	@if $hover {
		&:hover {color: $hover;}
	}
	@if $active {
		&:active {color: $active;}
	}
}

//.element a {@include link-backgrounds(red, orange, yellow, green, blue);}
@mixin link-backgrounds($normal, $hover: false, $active: false, $visited: false, $focus: false){
	color: $normal;
	@if $visited {
		&:visited {background: $visited;}
	}
	@if $focus {
		&:focus {background: $focus;}
	}
	@if $hover {
		&:hover {background: $hover;}
	}
	@if $active {
		&:active {background: $active;}
	}
}

//.element {@include background-color(#333, 0.5);}
@mixin background-color($color, $opacity: 1){
    background-color: $color; background-color: rgba($color, $opacity);
}

//.element {@include linear-gradient(#31B7D7, #EDAC7D);}
//.element {@include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);}
@mixin linear-gradient($direction, $colors...){
	background: nth(nth($colors, 1), 1); background: linear-gradient($direction, $colors);
}

//.element {@include widescreen(){background: red;};}
@mixin ultrawidescreen(){
	@media only screen and (min-width: 1600px){& {@content}} //This size and larger
}

//.element {@include widescreen(){background: red;};}
@mixin widescreen(){
	@media only screen and (min-width: 1200px){& {@content}} //This size and larger
}
//.element {@include tablet(){background: red;};}
//.element {@include tablet(landscape){background: purple;};}
@mixin tablet($orientation: "portrait"){
	@if $orientation == "landscape" {
		@media only screen and (max-width: 1023px){& {@content}} //This size and smaller
	} @else {
		@media only screen and (max-width: 767px){& {@content}} //This size and smaller
	}
}
//.element {@include mobile(){background: red;};}
//.element {@include mobile(landscape){background: purple;};}
@mixin mobile($orientation: "portrait"){
	@if $orientation == "landscape" {
		@media only screen and (max-width: 668px){& {@content}} //This size and smaller
	} @else {
		@media only screen and (max-width: 376px){& {@content}} //This size and smaller
	}
}
//.element {@include print(){background: red;};}
@mixin print(){
	@media only print {& {@content}}
}
//.element {@include media(mobile) {background: red;};}
//.element {@include media(custom, "only screen and (max-width: 550px)") {background: red;};}
@mixin media($group, $custom: ""){
	@if $group == "ultrawidescreen" {
		@include ultrawidescreen(){& {@content}}
	}
	@if $group == "widescreen" {
		@include widescreen(){& {@content}}
	}
	@if $group == "tablet_landscape" {
		@include tablet(landscape){& {@content}}
	}
	@if $group == "tablet" {
		@include tablet(){& {@content}}
	}
	@if $group == "mobile_landscape" {
		@include mobile(landscape){& {@content}}
	}
	@if $group == "mobile" {
		@include mobile(){& {@content}}
	}
	@if $group == "print" {
		@include print(){& {@content}}
	}
	@if $group == "custom" {
		@media #{$custom} {& {@content}}
	}

	//Bootstrap
	@if $group == "sm" {
		@media (min-width: 544px){& {@content}} //This size and larger
	}
	@if $group == "md" {
		@media (min-width: 768px){& {@content}} //This size and larger
	}
	@if $group == "lg" {
		@media (min-width: 992px){& {@content}} //This size and larger
	}
	@if $group == "xl" {
		@include widescreen(){& {@content}}
	}

	//Nebula Extended Viewports
	@if $group == "xxl" {
		@media (min-width: 1600px){& {@content}} //This size and larger
	}

	@if $group == "uw" {
		@media (min-width: 2048px){& {@content}} //This size and larger
	}
}

//.element {@include supports(box-shadow, 2px 2px 2px black);}
@mixin supports($property, $value){ //@TODO "Nebula" 0: Ideally the property and value would be passed as a single variable: supports(box-shadow: 2px 2px 2px black);
	@supports ($property $value){
		& {#{$property}: $value}
	}
}

//.element {@include clearfix();}
@mixin clearfix(){
	&:before,
	&:after {content: ""; display: table;}
	&:after {clear: both;}
}

//Maintain a responsive aspect ratio
//.element {@include ratio(16, 9);}
@mixin ratio($x, $y, $pseudo: false){
	$padding: unquote(($y/$x) * 100 + '%');
	@if $pseudo {
		&:before {content: ''; display: block; position: relative; width: 100%; padding-top: $padding;}
	} @else {
		padding-top: $padding;
	}
}

//.element {@include zoom(1.5);}
//.element {@include zoom(0.75, center top);}
@mixin zoom($zoom: 1, $origin: 0 0){
	@include prefix((transform: scale($zoom)));
	@include prefix((transform-origin: $origin));
	.ie8 & {zoom: $zoom;}
}

//@include keyframes(slide-down){0% {opacity: 1;} 90% {opacity: 0;}}
@mixin keyframes($animation-name){
	@-webkit-keyframes $animation-name {@content;}
	@keyframes $animation-name {@content;}
}

//Prepend an icon to a link that slides in on hover.
//a.element {@include iconpeek("\f054");} //Optionally pass a FontAwesome icon from http://fortawesome.github.io/Font-Awesome/icons/ using the provided unicode.
@mixin iconpeek($icon: "\f061"){
    display: inline-block; position: relative; overflow: hidden; transition: padding 0.4s easing(easeOutBack);
    &:before {content: $icon; font-family: "FontAwesome"; position: absolute; left: -25px; transition: left 0.4s easing(easeOutBack);}
    &:hover {padding-left: 25px;
        &:before {left: 0;}
    }
}
.nebula-peek, .nebula-iconpeek {@include iconpeek();}

//.element-solid {@include arrow('top','left', 10px, #4fade3);}
//.element-border {@include arrow('top','left', 10px, #eee, #4fade3, 6px);}
@mixin arrow($side: "right", $align: "center", $size: 20px, $color: #f6f6f6, $borderColor: "none", $borderSize: 3px) {
	$selector: "&:after, &:before";
	@if $borderColor == "none" {
		$selector: "&:after";
	}
	#{$selector} {border: solid transparent; content: " "; height: 0; width: 0; position: absolute; pointer-events: none; visibility: visible;}
	&:after {border-width: $size; @include arrow_helper($size, $color, $size, $side, $align);}

	@if $borderColor != "none" {
		&:before {border-width: $borderSize + $size; @include arrow_helper($size + $borderSize, $borderColor, $size - $borderSize, $side, $align);}
	}
}
@mixin arrow_helper($arrowSize, $arrowColor, $margin, $side, $align) {
	@if $side == "top" {
		border-bottom-color: $arrowColor; top: -2 * $arrowSize;
	}
	@if $side == "bottom" {
		border-top-color: $arrowColor; bottom: -2 * $arrowSize;
	}
	@if $side == "left" {
		border-right-color: $arrowColor; left: -2 * $arrowSize;
	}
	@if $side == "right" {
		border-left-color: $arrowColor; right: -2 * $arrowSize;
	}
	@if $side == "right" or $side == "left" {
		@if $align == "center" {
			top: 50%; margin-top: -$arrowSize;
		} @else if $align == "top" {
			top: $margin;
		} @else if $align == "bottom" {
			bottom: $margin;
		}
	}
	@if $side == "bottom" or $side == "top" {
		@if $align == "center" {
			right: 50%; margin-right: -$arrowSize;
		} @else if $align == "left" {
			left: $margin;
		} @else if $align == "right" {
			right: $margin;
		}
	}
}

/*
	.element {
		@include yep(opacity, csstransforms){opacity: 0; transform: translateX(10px);}
		@include nope(opacity, csstransforms){visibility: hidden; left: 10px;}
	}
*/
@mixin modernizr($features, $supports){
	$everything-okay: true;
	$prefix: if($supports, '', 'no-'); //Use the 'no-' prefix if checking for unsuported features (e.g. `.no-translate3d`)
	$selector: if($supports, '', (unquote('.no-js'))); //Features selector: create a string if checking for supported features -or- create a list if checking for unsuported features
	$placeholder: if($supports, '%yep', '%nope'); //The placeholder (e.g. `%yep-translate3d` or `%nope-opacity`)
	@each $feature in $features { //Generate placeholder and selectors
		@if ( type-of($feature) != string ){ //Making sure $feature is a string
			$everything-okay: false;
			@warn '`#{$feature} is not a string for `modernizr`';
		} @else {
			$placeholder: $placeholder + '-' + $feature; //Add feature name to the placeholder string (e.g. '%yep' + '-' + 'translate3d' or '%nope' + '-' + 'translate3d')
			$new-selector: #{'.' + $prefix + $feature}; //Define the new selector string (e.g. `.translate3d` or `.no-translate3d`)
			$selector: if($supports, $selector + $new-selector, append($selector, $new-selector, comma)); //Append the new selector (to the string if yep, to the list if nope)
		}
	}
	@if ( $everything-okay == true ){
		#{$placeholder} & {@content;}
		@at-root #{$selector} {@extend #{$placeholder};}
	}
}
@mixin yep($features...) { //modernizr alias
	@include modernizr($features, $supports: true){@content;}
}
@mixin nope($features...) { //modernizr alias
	@include modernizr($features, $supports: false){@content;}
}



// ===========================
// Functions
// ===========================

//.example {color: brand(facebook);}
//.example {color: brand(flickr, secondary);}
//.example {color: brand(flickr, 2);}
@function brand($name, $index: 1){
	@if $index == 0 {
		$index: 1;
	}

	$index_names: (primary: 1, secondary: 2, tertiary: 3, quaternary: 4, quinary: 5, senary: 6, septenary: 7, octonary: 8, nonary: 9, denary: 10);
	@if map-has-key($index_names, $index) {
		$index: map_get($index_names, $index);
	}

	$brand_colors: map-get($brands, $name);
	@if $index > length($brand_colors) {
		//@warn '#{$name} does not have a color in the index of #{$index}';
		$index: 1;
	}

	@if length($brand_colors) == 1 {
		@return $brand_colors;
	}

	@each $current_color in $brand_colors {
		$i: index($brand_colors, $current_color);
		//@warn '#{$current_color} is in the index of #{$i}';
		@if $i == $index {
			@return $current_color;
		}
	}
}

//.example {@include prefix((transition: right 0.5s easing(easeOutBack)));}
//.example {@include prefix((transition: right 0.5s easing(custom, "0.190, 1.000, 0.220, 1.000")));}
@function easing($ease: linear, $custom: ""){
	@each $name, $values in $easings {
		@if $ease == $name {
			@return cubic-bezier(unquote(#{$values}) unquote(#{$custom}));
		} @else {
			//@warn '#{$ease} not found in the easings map.';
		}
	}
}